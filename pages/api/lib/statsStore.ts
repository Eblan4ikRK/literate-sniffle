// pages/api/lib/statsStore.ts
import Redis from 'ioredis';
import redisConfig from '../../../redis.json';

interface RedisConfig {
  url: string;
  name: string;
  useTLS?: boolean;
}

let currentRedis: Redis | null = null;
let currentConfig: RedisConfig | null = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis (—Å failover)
async function connectToRedis(): Promise<Redis | null> {
  // –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π Redis –ø–æ –ø–æ—Ä—è–¥–∫—É
  for (const config of redisConfig as RedisConfig[]) {
    try {
      console.log(`üîß –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: ${config.name} (${config.url.split('@').pop()})`);

      const redis = new Redis(config.url, {
        ...(config.useTLS ? { tls: {} } : {}),
        retryStrategy: (times) => {
          // –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
          if (times > 3) return null;
          return Math.min(times * 100, 1000);
        },
        maxRetriesPerRequest: 1,
      });

      await Promise.race([
        redis.ping(),
        new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), 3000))
      ]);

      console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Redis: ${config.name}`);
      currentConfig = config;
      return redis;
    } catch (error) {
      console.warn(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis ${config.name}:`, (error as Error).message);
      continue;
    }
  }

  console.error('üö® –í—Å–µ Redis-—Å–µ—Ä–≤–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –†–∞–±–æ—Ç–∞–µ–º –≤ –æ—Ñ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ.');
  return null;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async function initRedis() {
  if (currentRedis) return;

  currentRedis = await connectToRedis();

  // –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ–¥–Ω–æ–≥–æ ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ–∑–∂–µ
  if (currentRedis) {
    currentRedis.on('error', async (err) => {
      console.error('üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Redis:', err);
      currentRedis?.disconnect();
      currentRedis = null;
      currentConfig = null;

      // –ß–µ—Ä–µ–∑ 5 —Å–µ–∫ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
      setTimeout(async () => {
        const newRedis = await connectToRedis();
        if (newRedis) {
          currentRedis = newRedis;
          console.log('üîÅ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –Ω–æ–≤—ã–π Redis-–∏–Ω—Å—Ç–∞–Ω—Å');
        }
      }, 5000);
    });
  }
}

// –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
initRedis().catch(console.error);

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
export interface StatsStore {
  logRequest(): Promise<void>;
  getStats(): Promise<{
    totalRequests: number;
    requestsPerSecond: number;
  }>;
}

class FailoverStatsStore implements StatsStore {
  private readonly KEY = 'live:requests';
  private readonly WINDOW_SIZE = 1000;

  async logRequest(): Promise<void> {
    if (!currentRedis) {
      console.debug('‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, logRequest –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    const now = Date.now();
    const member = `${now}-${Math.random()}`;

    try {
      await currentRedis.zadd(this.KEY, now, member);
      await currentRedis.expire(this.KEY, 10);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', (error as Error).message);
      // –ù–µ –ø–∞–¥–∞–µ–º ‚Äî –ø—É—Å—Ç—å retry –∏–ª–∏ failover —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–∑–∂–µ
    }
  }

  async getStats(): Promise<{
    totalRequests: number;
    requestsPerSecond: number;
  }> {
    if (!currentRedis) {
      console.debug('‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0');
      return { totalRequests: 0, requestsPerSecond: 0 };
    }

    try {
      const now = Date.now();
      const cutoff = now - this.WINDOW_SIZE;
      await currentRedis.zremrangebyscore(this.KEY, 0, cutoff);
      const count = (await currentRedis.zcard(this.KEY)) || 0;

      return {
        totalRequests: count,
        requestsPerSecond: count,
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', (error as Error).message);
      return { totalRequests: 0, requestsPerSecond: 0 };
    }
  }
}

const statsStore: StatsStore = new FailoverStatsStore();
export default statsStore;