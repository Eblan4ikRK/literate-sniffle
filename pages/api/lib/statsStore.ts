// pages/api/lib/statsStore.ts
import Redis from 'ioredis';
import redisConfig from '../../../redis.json';

interface RedisConfig {
  url: string;
  name: string;
  useTLS?: boolean;
}

let client: Redis | null = null;
let config: RedisConfig | null = null;
let currentIndex = -1;

// –§—É–Ω–∫—Ü–∏—è: –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–æ—Å—Ç—É–ø–Ω–æ–º—É Redis
async function connect(): Promise<boolean> {
  // –ù–∞—á–∏–Ω–∞–µ–º —Å 0 –∏–ª–∏ –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ
  const startFrom = currentIndex === -1 ? 0 : (currentIndex + 1) % redisConfig.length;
  const tried: number[] = [];

  let index = startFrom;

  do {
    const conf = (redisConfig as RedisConfig[])[index];
    if (!conf) {
      tried.push(index);
      continue;
    }

    console.log(`üîÅ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: ${conf.name}`);

    try {
      const redis = new Redis(conf.url, {
        ...(conf.useTLS ? { tls: {} } : {}),
        maxRetriesPerRequest: 1,
        retryStrategy: (times) => {
          return times > 3 ? null : 100;
        },
      });

      // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      await Promise.race([redis.ping(), new Promise((_, reject) => setTimeout(reject, 3000))]);

      // –£—Å–ø–µ—à–Ω–æ
      if (client) client.quit(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      client = redis;
      config = conf;
      currentIndex = index;

      console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Redis: ${conf.name}`);
      return true;
    } catch (err) {
      console.warn(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis ${conf.name}:`, (err as Error).message);
    }

    tried.push(index);
    index = (index + 1) % redisConfig.length;
  } while (index !== startFrom);

  console.error('üö® –í—Å–µ Redis-—Å–µ—Ä–≤–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.');
  client = null;
  config = null;
  currentIndex = -1;
  return false;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async function init() {
  if (!(await connect())) {
    // –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ
    setInterval(async () => {
      if (!client) {
        console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis...');
        await connect();
      }
    }, 5000);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
init().catch(console.error);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
function setupClientEvents() {
  if (!client || !config) return;

  client.on('error', async (err) => {
    console.error(`üî• –û—à–∏–±–∫–∞ Redis (${config.name}):`, err.message);
    client?.removeAllListeners();
    client = null;

    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π —É–∑–µ–ª
    await connect();
  });

  client.on('close', () => {
    console.log(`üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis ${config?.name} –∑–∞–∫—Ä—ã—Ç–æ`);
    client = null;
    setTimeout(() => connect(), 2000);
  });
}

// –ü–µ—Ä–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ + –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
connect().then(setupClientEvents);

// –ü–µ—Ä–µ–ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
const originalConnect = connect;
connect = new Proxy(originalConnect, {
  async apply(target, thisArg, args) {
    const result = await Reflect.apply(target, thisArg, args);
    if (result) setupClientEvents();
    return result;
  },
});

// === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å StatsStore ===
export interface StatsStore {
  logRequest(): Promise<void>;
  getStats(): Promise<{
    totalRequests: number;
    requestsPerSecond: number;
  }>;
}

class FailoverStatsStore implements StatsStore {
  private readonly KEY = 'live:requests';
  private readonly WINDOW_SIZE = 1000;

  async logRequest(): Promise<void> {
    if (!client) {
      console.debug('‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—Ä–æ—Å –Ω–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω.');
      return;
    }

    const now = Date.now();
    const member = `${now}-${Math.random()}`;

    try {
      await client.zadd(this.KEY, now, member);
      await client.expire(this.KEY, 10);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ logRequest:', (err as Error).message);
      // –ö–ª–∏–µ–Ω—Ç —Å–∞–º —É–ø–∞–¥—ë—Ç ‚Üí —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    }
  }

  async getStats(): Promise<{
    totalRequests: number;
    requestsPerSecond: number;
  }> {
    if (!client) {
      return { totalRequests: 0, requestsPerSecond: 0 };
    }

    try {
      const now = Date.now();
      const cutoff = now - this.WINDOW_SIZE;
      await client.zremrangebyscore(this.KEY, 0, cutoff);
      const count = (await client.zcard(this.KEY)) || 0;

      return {
        totalRequests: count,
        requestsPerSecond: count,
      };
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ getStats:', (err as Error).message);
      return { totalRequests: 0, requestsPerSecond: 0 };
    }
  }
}

const statsStore = new FailoverStatsStore();
export default statsStore;
